const express = require('express');
const router = express.Router();

const challenges = [
  { id: 1, title: "Reverse a String", description: "Write a C-style function that takes a string (char array) as input and returns the reversed version.", code: `// C-style: void reverseString(char *str); \n// JS-style: function reverseString(str) { /* Your code here */ }` },
  { id: 2, title: "Factorial of a Number", description: "Write a C-style function to calculate the factorial of a given non-negative integer.", code: `// C-style: int factorial(int n); \n// JS-style: function factorial(n) { /* Your code here */ }` },
  { id: 3, title: "Check for Palindrome", description: "Write a C-style function to check if a given string is a palindrome.", code: `// C-style: int isPalindrome(char *str); \n// JS-style: function isPalindrome(str) { /* Your code here */ }` },
  { id: 4, title: "Find the Largest Element in an Array", description: "Write a C-style function that takes an array of integers and its size, returning the largest element.", code: `// C-style: int findLargest(int arr[], int size); \n// JS-style: function findLargest(arr) { /* Your code here */ }` },
  { id: 5, title: "Remove Duplicates from an Array (Conceptual)", description: "Describe the logic of a C-style function to remove duplicates from an array (in-place or creating a new array).", code: `// Conceptual description here` },
  { id: 6, title: "Count Occurrences of a Character", description: "Write a C-style function to count the occurrences of a specific character in a string.", code: `// C-style: int countChar(char *str, char ch); \n// JS-style: function countChar(str, ch) { /* Your code here */ }` },
  { id: 7, title: "Title Case a Sentence", description: "Write a C-style function to convert a sentence to title case.", code: `// C-style: void titleCase(char *str); \n// JS-style: function titleCase(str) { /* Your code here */ }` },
  { id: 8, title: "Check if a Number is Prime", description: "Write a C-style function to check if a given positive integer is prime.", code: `// C-style: int isPrime(int n); \n// JS-style: function isPrime(n) { /* Your code here */ }` },
  { id: 9, title: "Fibonacci Sequence", description: "Write a C-style function to generate the first n Fibonacci numbers and store them in an array.", code: `// C-style: void fibonacci(int n, int *result); \n// JS-style: function fibonacci(n) { /* Your code here */ }` },
  { id: 10, title: "Anagram Checker", description: "Write a C-style function to check if two strings are anagrams.", code: `// C-style: int areAnagrams(char *str1, char *str2); \n// JS-style: function areAnagrams(str1, str2) { /* Your code here */ }` },
  { id: 11, title: "Find the Smallest Element in an Array", description: "Write a C-style function to find the smallest element in an array of integers.", code: `// C-style: int findSmallest(int arr[], int size); \n// JS-style: function findSmallest(arr) { /* Your code here */ }` },
  { id: 12, title: "Sum of Array Elements", description: "Write a C-style function to calculate the sum of elements in an array of integers.", code: `// C-style: int sumArray(int arr[], int size); \n// JS-style: function sumArray(arr) { /* Your code here */ }` },
  { id: 13, title: "Average of Array Elements", description: "Write a C-style function to calculate the average of elements in an array of integers.", code: `// C-style: float averageArray(int arr[], int size); \n// JS-style: function averageArray(arr) { /* Your code here */ }` },
  { id: 14, title: "Reverse an Array (In-place)", description: "Write a C-style function to reverse an array of integers in-place.", code: `// C-style: void reverseArray(int arr[], int size); \n// JS-style: function reverseArray(arr) { /* Your code here */ }` },
  { id: 15, title: "Merge Two Sorted Arrays", description: "Write a C-style function to merge two sorted arrays into a new sorted array.", code: `// C-style: int* mergeSortedArrays(int arr1[], int size1, int arr2[], int size2, int *resultSize); \n// JS-style: function mergeSortedArrays(arr1, arr2) { /* Your code here */ }` },
  { id: 16, title: "Implement a Simple Map (Conceptual)", description: "Describe the data structure and logic for a simple key-value map in C using arrays or linked lists.", code: `// Conceptual description here` },
  { id: 17, title: "Implement a Simple Filter (Conceptual)", description: "Describe the logic of a C-style function to filter elements from an array based on a condition.", code: `// Conceptual description here` },
  { id: 18, title: "Implement a Simple Reduce (Conceptual)", description: "Describe the logic of a C-style function to 'reduce' an array to a single value.", code: `// Conceptual description here` },
  { id: 19, title: "Deep Copy a Structure (Conceptual)", description: "Describe how you would perform a deep copy of a nested structure in C, considering pointer members.", code: `// Conceptual description here` },
  { id: 20, title: "Debounce a Function (Conceptual - using timers)", description: "Describe how you might implement a debounce mechanism in a C-like environment using timers.", code: `// Conceptual description here` },
  { id: 21, title: "Throttle a Function (Conceptual - using timers)", description: "Describe how you might implement a throttle mechanism in a C-like environment using timers.", code: `// Conceptual description here` },
  { id: 22, title: "Find the Second Largest Element", description: "Write a C-style function to find the second largest element in an array of integers.", code: `// C-style: int findSecondLargest(int arr[], int size); \n// JS-style: function findSecondLargest(arr) { /* Your code here */ }` },
  { id: 23, title: "Check if All Array Elements are Unique", description: "Write a C-style function to check if all elements in an array of integers are unique.", code: `// C-style: int areAllUnique(int arr[], int size); \n// JS-style: function areAllUnique(arr) { /* Your code here */ }` },
  { id: 24, title: "Flatten a 2D Array (Conceptual)", description: "Describe the logic to flatten a 2D array (matrix) into a 1D array in C.", code: `// Conceptual description here` },
  { id: 25, title: "Group Array Elements (by parity - example)", description: "Describe the logic of a C-style function to group elements of an array based on whether they are even or odd.", code: `// Conceptual description here` },
  { id: 26, title: "Implement a Basic Calculator", description: "Write a C-style function that takes two doubles and an operator (+, -, *, /) and returns the result.", code: `// C-style: double calculate(double num1, double num2, char operator); \n// JS-style: function calculate(num1, num2, operator) { /* Your code here */ }` },
  { id: 27, title: "Check for Substring", description: "Write a C-style function to check if a string contains a given substring.", code: `// C-style: int containsSubstring(char *str, char *sub); \n// JS-style: function containsSubstring(str, sub) { /* Your code here */ }` },
  { id: 28, title: "Replace All Occurrences (Conceptual)", description: "Describe the logic of a C-style function to replace all occurrences of a substring within a string.", code: `// Conceptual description here` },
  { id: 29, title: "Find the Longest Word in a Sentence", description: "Write a C-style function to find the longest word in a sentence.", code: `// C-style: char* findLongestWord(char *sentence); \n// JS-style: function findLongestWord(sentence) { /* Your code here */ }` },
  { id: 30, title: "Count Words in a Sentence", description: "Write a C-style function to count the number of words in a sentence.", code: `// C-style: int countWords(char *sentence); \n// JS-style: function countWords(sentence) { /* Your code here */ }` },
  { id: 31, title: "Generate Random Password", description: "Write a C-style function to generate a random password of a specified length.", code: `// C-style: char* generateRandomPassword(int length); \n// JS-style: function generateRandomPassword(length) { /* Your code here */ }` },
  { id: 32, title: "Convert Celsius to Fahrenheit", description: "Write a C-style function to convert Celsius to Fahrenheit.", code: `// C-style: float celsiusToFahrenheit(float celsius); \n// JS-style: function celsiusToFahrenheit(celsius) { /* Your code here */ }` },
  { id: 33, title: "Convert Fahrenheit to Celsius", description: "Write a C-style function to convert Fahrenheit to Celsius.", code: `// C-style: float fahrenheitToCelsius(float fahrenheit); \n// JS-style: function fahrenheitToCelsius(fahrenheit) { /* Your code here */ }` },
  { id: 34, title: "Check if Two Arrays are Equal", description: "Write a C-style function to check if two arrays of integers are equal.", code: `// C-style: int areArraysEqual(int arr1[], int size1, int arr2[], int size2); \n// JS-style: function areArraysEqual(arr1, arr2) { /* Your code here */ }` },
  { id: 35, title: "Find the Intersection of Two Arrays", description: "Write a C-style function to find the intersection of two arrays of integers.", code: `// C-style: int* findIntersection(int arr1[], int size1, int arr2[], int size2, int *resultSize); \n// JS-style: function findIntersection(arr1, arr2) { /* Your code here */ }` },
  { id: 36, title: "Find the Union of Two Arrays", description: "Write a C-style function to find the union of two arrays of integers.", code: `// C-style: int* findUnion(int arr1[], int size1, int arr2[], int size2, int *resultSize); \n// JS-style: function findUnion(arr1, arr2) { /* Your code here */ }` },
  { id: 37, title: "Implement a Simple Queue (Conceptual - using arrays/structs)", description: "Describe how you would implement a simple queue in C using arrays or structs and pointers.", code: `// Conceptual description here` },
  { id: 38, title: "Implement a Simple Stack (Conceptual - using arrays/structs)", description: "Describe how you would implement a simple stack in C using arrays or structs and pointers.", code: `// Conceptual description here` },
  { id: 39, title: "Binary Search", description: "Write a C-style function to perform binary search on a sorted array of integers.", code: `// C-style: int binarySearch(int arr[], int size, int target); \n// JS-style: function binarySearch(arr, target) { /* Your code here */ }` },
  { id: 40, title: "Linear Search", description: "Write a C-style function to perform linear search on an array of integers.", code: `// C-style: int linearSearch(int arr[], int size, int target); \n// JS-style: function linearSearch(arr, target) { /* Your code here */ }` },
  { id: 41, title: "Sort an Array (without using library sort)", description: "Write a C-style function to sort an array of integers (e.g., using bubble sort, insertion sort).", code: `// C-style: void sortArray(int arr[], int size); \n// JS-style: function sortArray(arr) { /* Your code here */ }` },
  { id: 42, title: "Check if a String Starts with a Specific Prefix", description: "Write a C-style function to check if a string starts with a given prefix.", code: `// C-style: int startsWith(char *str, char *prefix); \n// JS-style: function startsWith(str, prefix) { /* Your code here */ }` },
  { id: 43, title: "Check if a String Ends with a Specific Suffix", description: "Write a C-style function to check if a string ends with a given suffix.", code: `// C-style: int endsWith(char *str, char *suffix); \n// JS-style: function endsWith(str, suffix) { /* Your code here */ }` },
  { id: 44, title: "Function Pointers (Conceptual)", description: "Explain the concept and use of function pointers in C.", code: `// Conceptual description here` },
  { id: 45, title: "Memory Allocation (Conceptual - malloc/free)", description: "Describe the basic usage of `malloc` and `free` for dynamic memory allocation in C.", code: `// Conceptual description here` },
  { id: 46, title: "Bitwise Operations (Conceptual)", description: "Explain the basic bitwise operators in C (`&`, `|`, `^`, `~`, `<<`, `>>`) and their common uses.", code: `// Conceptual description here` },
  { id: 47, title: "Structures (Conceptual)", description: "Explain how structures (`struct`) are defined and used to group data in C.", code: `// Conceptual description here` },
  { id: 48, title: "File I/O (Conceptual - basic read/write)", description: "Describe the basic steps involved in reading from and writing to a file in C using standard library functions.", code: `// Conceptual description here` },
  { id: 49, title: "Pointers and Arrays (Conceptual)", description: "Explain the relationship between pointers and arrays in C.", code: `// Conceptual description here` },
  { id: 50, title: "Basic String Manipulation (Conceptual - without library functions)", description: "Describe how you might implement basic string manipulation functions like `strlen` or `strcpy` in C without using the standard library string functions.", code: `// Conceptual description here` },
];

router.get('/c/challenges', (req, res) => {
  res.json(challenges);
});

module.exports = router;