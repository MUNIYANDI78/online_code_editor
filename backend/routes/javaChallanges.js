const express = require('express');
const router = express.Router();

const challenges = [
  { id: 1, title: "Reverse a String", description: "Write a Java method that takes a String as input and returns the reversed version of the String.", code: `public static String reverseString(String str) { /* Your code here */ }` },
  { id: 2, title: "Factorial of a Number", description: "Write a Java method that calculates the factorial of a given non-negative integer.", code: `public static int factorial(int n) { /* Your code here */ }` },
  { id: 3, title: "Check for Palindrome", description: "Write a Java method that checks if a given String is a palindrome (reads the same forwards and backward).", code: `public static boolean isPalindrome(String str) { /* Your code here */ }` },
  { id: 4, title: "Find the Largest Element in an Array", description: "Write a Java method that takes an array of integers as input and returns the largest number in the array.", code: `public static int findLargest(int[] arr) { /* Your code here */ }` },
  { id: 5, title: "Remove Duplicates from an Array", description: "Write a Java method that takes an array of integers and returns a new List with all duplicate elements removed.", code: `public static List<Integer> removeDuplicates(int[] arr) { /* Your code here */ }` },
  { id: 6, title: "Count Occurrences of a Character", description: "Write a Java method that takes a String and a character as input and returns the number of times the character appears in the String.", code: `public static int countChar(String str, char ch) { /* Your code here */ }` },
  { id: 7, title: "Title Case a Sentence", description: "Write a Java method that takes a sentence as input and returns the sentence in title case (first letter of each word is capitalized).", code: `public static String titleCase(String sentence) { /* Your code here */ }` },
  { id: 8, title: "Check if a Number is Prime", description: "Write a Java method that checks if a given positive integer is a prime number.", code: `public static boolean isPrime(int n) { /* Your code here */ }` },
  { id: 9, title: "Fibonacci Sequence", description: "Write a Java method that generates the first n numbers in the Fibonacci sequence and returns them in a List.", code: `public static List<Integer> fibonacci(int n) { /* Your code here */ }` },
  { id: 10, title: "Anagram Checker", description: "Write a Java method that takes two Strings as input and returns true if they are anagrams of each other.", code: `public static boolean areAnagrams(String str1, String str2) { /* Your code here */ }` },
  { id: 11, title: "Find the Smallest Element in an Array", description: "Write a Java method that takes an array of integers and returns the smallest number.", code: `public static int findSmallest(int[] arr) { /* Your code here */ }` },
  { id: 12, title: "Sum of Array Elements", description: "Write a Java method that takes an array of integers and returns the sum of all the elements.", code: `public static int sumArray(int[] arr) { /* Your code here */ }` },
  { id: 13, title: "Average of Array Elements", description: "Write a Java method that takes an array of integers and returns the average of all the elements.", code: `public static double averageArray(int[] arr) { /* Your code here */ }` },
  { id: 14, title: "Reverse an Array", description: "Write a Java method that takes an array of integers and returns a new array with the elements in reverse order.", code: `public static int[] reverseArray(int[] arr) { /* Your code here */ }` },
  { id: 15, title: "Merge Two Sorted Arrays", description: "Write a Java method that takes two sorted arrays of integers and merges them into a single sorted array.", code: `public static int[] mergeSortedArrays(int[] arr1, int[] arr2) { /* Your code here */ }` },
  { id: 16, title: "Implement Array.prototype.map() (for Integers)", description: "Write a Java method that mimics the behavior of the `map()` operation for a List of Integers, taking a Function as input.", code: `public static List<Integer> mapArray(List<Integer> arr, java.util.function.Function<Integer, Integer> mapper) { /* Your code here */ }` },
  { id: 17, title: "Implement Array.prototype.filter() (for Integers)", description: "Write a Java method that mimics the behavior of the `filter()` operation for a List of Integers, taking a Predicate as input.", code: `public static List<Integer> filterArray(List<Integer> arr, java.util.function.Predicate<Integer> predicate) { /* Your code here */ }` },
  { id: 18, title: "Implement Array.prototype.reduce() (for Integers)", description: "Write a Java method that mimics the behavior of the `reduce()` operation for a List of Integers, taking an initial value and a BiFunction as input.", code: `public static <U> U reduceArray(List<Integer> arr, U initialValue, java.util.function.BiFunction<U, Integer, U> accumulator) { /* Your code here */ }` },
  { id: 19, title: "Deep Clone an Object (Simple Map)", description: "Write a Java method that creates a deep clone of a simple Map<String, Object>.", code: `public static Map<String, Object> deepClone(Map<String, Object> obj) { /* Your code here */ }` },
  { id: 20, title: "Debounce a Function (Conceptual)", description: "Describe how you would implement a debounce function in Java (conceptually, without writing full threading code).", code: `// Conceptual description here` },
  { id: 21, title: "Throttle a Function (Conceptual)", description: "Describe how you would implement a throttle function in Java (conceptually, without writing full threading code).", code: `// Conceptual description here` },
  { id: 22, title: "Implement Promise.all() (Conceptual)", description: "Describe how you would conceptually implement the equivalent of `Promise.all()` in Java using concurrency.", code: `// Conceptual description here` },
  { id: 23, title: "Implement Promise.race() (Conceptual)", description: "Describe how you would conceptually implement the equivalent of `Promise.race()` in Java using concurrency.", code: `// Conceptual description here` },
  { id: 24, title: "Find the Second Largest Element", description: "Write a Java method that takes an array of integers and returns the second largest number.", code: `public static int findSecondLargest(int[] arr) { /* Your code here */ }` },
  { id: 25, title: "Check if All Array Elements are Unique", description: "Write a Java method that checks if all elements in an array of integers are unique.", code: `public static boolean areAllUnique(int[] arr) { /* Your code here */ }` },
  { id: 26, title: "Flatten an Array (List of Lists of Integers)", description: "Write a Java method that flattens a List of Lists of Integers into a single List of Integers.", code: `public static List<Integer> flattenArray(List<List<Integer>> nestedList) { /* Your code here */ }` },
  { id: 27, title: "Group Array Elements (by parity - example)", description: "Write a Java method that takes an array of integers and groups them into a Map based on their parity ('even' or 'odd').", code: `public static Map<String, List<Integer>> groupByParity(int[] arr) { /* Your code here */ }` },
  { id: 28, title: "Implement a Basic Calculator", description: "Write a Java method that takes two doubles and a character operator (+, -, *, /) and performs the corresponding calculation.", code: `public static double calculate(double num1, double num2, char operator) { /* Your code here */ }` },
  { id: 29, title: "Check for Substring", description: "Write a Java method that checks if a given String contains another String as a substring.", code: `public static boolean containsSubstring(String str, String sub) { /* Your code here */ }` },
  { id: 30, title: "Replace All Occurrences", description: "Write a Java method that takes a String, a target substring, and a replacement String, and replaces all occurrences of the target.", code: `public static String replaceAllOccurrences(String str, String target, String replacement) { /* Your code here */ }` },
  { id: 31, title: "Find the Longest Word in a Sentence", description: "Write a Java method that takes a sentence and returns the longest word in it.", code: `public static String findLongestWord(String sentence) { /* Your code here */ }` },
  { id: 32, title: "Count Words in a Sentence", description: "Write a Java method that takes a sentence and returns the number of words in it.", code: `public static int countWords(String sentence) { /* Your code here */ }` },
  { id: 33, title: "Generate Random Password", description: "Write a Java method that generates a random password of a specified length.", code: `public static String generateRandomPassword(int length) { /* Your code here */ }` },
  { id: 34, title: "Convert Celsius to Fahrenheit", description: "Write a Java method that converts a temperature from Celsius to Fahrenheit.", code: `public static double celsiusToFahrenheit(double celsius) { /* Your code here */ }` },
  { id: 35, title: "Convert Fahrenheit to Celsius", description: "Write a Java method that converts a temperature from Fahrenheit to Celsius.", code: `public static double fahrenheitToCelsius(double fahrenheit) { /* Your code here */ }` },
  { id: 36, title: "Check if Two Arrays are Equal", description: "Write a Java method that checks if two arrays of integers are equal (contain the same elements in the same order).", code: `public static boolean areArraysEqual(int[] arr1, int[] arr2) { /* Your code here */ }` },
  { id: 37, title: "Find the Intersection of Two Arrays", description: "Write a Java method that finds the common elements (intersection) of two arrays of integers and returns them in a List.", code: `public static List<Integer> findIntersection(int[] arr1, int[] arr2) { /* Your code here */ }` },
  { id: 38, title: "Find the Union of Two Arrays", description: "Write a Java method that finds the union of two arrays of integers (all unique elements from both arrays) and returns them in a List.", code: `public static List<Integer> findUnion(int[] arr1, int[] arr2) { /* Your code here */ }` },
  { id: 39, title: "Implement a Simple Queue", description: "Implement a simple Queue data structure in Java with `enqueue`, `dequeue`, and `isEmpty` methods.", code: `class SimpleQueue<T> { /* Your code here */ }` },
  { id: 40, title: "Implement a Simple Stack", description: "Implement a simple Stack data structure in Java with `push`, `pop`, and `isEmpty` methods.", code: `class SimpleStack<T> { /* Your code here */ }` },
  { id: 41, title: "Binary Search", description: "Implement the binary search algorithm in Java to find a specific element in a sorted array of integers.", code: `public static int binarySearch(int[] arr, int target) { /* Your code here */ }` },
  { id: 42, title: "Linear Search", description: "Implement the linear search algorithm in Java to find a specific element in an array of integers.", code: `public static int linearSearch(int[] arr, int target) { /* Your code here */ }` },
  { id: 43, title: "Sort an Array (without using built-in sort)", description: "Implement a sorting algorithm (e.g., bubble sort, insertion sort) in Java to sort an array of integers.", code: `public static void sortArray(int[] arr) { /* Your code here */ }` },
  { id: 44, title: "Check if a String Starts with a Specific Prefix", description: "Write a Java method that checks if a given String starts with a specific prefix.", code: `public static boolean startsWithPrefix(String str, String prefix) { /* Your code here */ }` },
  { id: 45, title: "Check if a String Ends with a Specific Suffix", description: "Write a Java method that checks if a given String ends with a specific suffix.", code: `public static boolean endsWithSuffix(String str, String suffix) { /* Your code here */ }` },
  { id: 46, title: "Compose Functions (Conceptual)", description: "Describe conceptually how you might implement function composition in Java.", code: `// Conceptual description here` },
  { id: 47, title: "Implement Curry Function (Conceptual)", description: "Describe conceptually how you might implement function currying in Java.", code: `// Conceptual description here` },
  { id: 48, title: "Find All Indices of an Element in an Array", description: "Write a Java method that returns a List of all indices where a specific element can be found in a given array of integers.", code: `public static List<Integer> findAllIndices(int[] arr, int target) { /* Your code here */ }` },
  { id: 49, title: "Check if One Array is a Subset of Another", description: "Write a Java method that checks if all elements of one array of integers are present in another array of integers.", code: `public static boolean isSubset(int[] arr1, int[] arr2) { /* Your code here */ }` },
  { id: 50, title: "Implement a Basic Promise (Conceptual)", description: "Describe conceptually how you might implement a simplified version of a Promise in Java with `then` and `resolve`-like behavior.", code: `// Conceptual description here` }
];

router.get('/java/challenges', (req, res) => {
  res.json(challenges);
});

module.exports = router;