const express = require('express');
const router = express.Router();

const challenges = [
  { id: 1, title: "Reverse a String", description: "Write a function that takes a string as input and returns the reversed version of the string." },
  { id: 2, title: "Factorial of a Number", description: "Write a function that calculates the factorial of a given non-negative integer." },
  { id: 3, title: "Check for Palindrome", description: "Write a function that checks if a given string is a palindrome (reads the same forwards and backward)." },
  { id: 4, title: "Find the Largest Element in an Array", description: "Write a function that takes an array of numbers as input and returns the largest number in the array." },
  { id: 5, title: "Remove Duplicates from an Array", description: "Write a function that takes an array and returns a new array with all duplicate elements removed." },
  { id: 6, title: "Count Occurrences of a Character", description: "Write a function that takes a string and a character as input and returns the number of times the character appears in the string." },
  { id: 7, title: "Title Case a Sentence", description: "Write a function that takes a sentence as input and returns the sentence in title case (first letter of each word is capitalized)." },
  { id: 8, title: "Check if a Number is Prime", description: "Write a function that checks if a given positive integer is a prime number." },
  { id: 9, title: "Fibonacci Sequence", description: "Write a function that generates the first n numbers in the Fibonacci sequence." },
  { id: 10, title: "Anagram Checker", description: "Write a function that takes two strings as input and returns true if they are anagrams of each other (contain the same characters with the same frequencies)." },
  { id: 11, title: "Find the Smallest Element in an Array", description: "Write a function that takes an array of numbers and returns the smallest number." },
  { id: 12, title: "Sum of Array Elements", description: "Write a function that takes an array of numbers and returns the sum of all the elements." },
  { id: 13, title: "Average of Array Elements", description: "Write a function that takes an array of numbers and returns the average of all the elements." },
  { id: 14, title: "Reverse an Array", description: "Write a function that takes an array and returns a new array with the elements in reverse order." },
  { id: 15, title: "Merge Two Sorted Arrays", description: "Write a function that takes two sorted arrays and merges them into a single sorted array." },
  { id: 16, title: "Implement Array.prototype.map()", description: "Write a function that mimics the behavior of the built-in `map()` method for arrays." },
  { id: 17, title: "Implement Array.prototype.filter()", description: "Write a function that mimics the behavior of the built-in `filter()` method for arrays." },
  { id: 18, title: "Implement Array.prototype.reduce()", description: "Write a function that mimics the behavior of the built-in `reduce()` method for arrays." },
  { id: 19, title: "Deep Clone an Object", description: "Write a function that creates a deep clone of a given object (including nested objects and arrays)." },
  { id: 20, title: "Debounce a Function", description: "Write a function that takes a function and a delay as input and returns a debounced version of the function." },
  { id: 21, title: "Throttle a Function", description: "Write a function that takes a function and a delay as input and returns a throttled version of the function." },
  { id: 22, title: "Implement Promise.all()", description: "Write a function that mimics the behavior of `Promise.all()`." },
  { id: 23, title: "Implement Promise.race()", description: "Write a function that mimics the behavior of `Promise.race()`." },
  { id: 24, title: "Find the Second Largest Element", description: "Write a function that takes an array of numbers and returns the second largest number." },
  { id: 25, title: "Check if All Array Elements are Unique", description: "Write a function that checks if all elements in an array are unique." },
  { id: 26, title: "Flatten an Array", description: "Write a function that flattens a nested array (an array containing other arrays) into a single-level array." },
  { id: 27, title: "Group Array Elements", description: "Write a function that takes an array and a grouping criteria (e.g., a property name) and returns an object where the keys are the criteria and the values are arrays of elements belonging to that group." },
  { id: 28, title: "Implement a Basic Calculator", description: "Write a function that takes two numbers and an operator (+, -, *, /) and performs the corresponding calculation." },
  { id: 29, title: "Check for Substring", description: "Write a function that checks if a given string contains another string as a substring." },
  { id: 30, title: "Replace All Occurrences", description: "Write a function that takes a string, a substring to find, and a replacement string, and replaces all occurrences of the substring." },
  { id: 31, title: "Find the Longest Word in a Sentence", description: "Write a function that takes a sentence and returns the longest word in it." },
  { id: 32, title: "Count Words in a Sentence", description: "Write a function that takes a sentence and returns the number of words in it." },
  { id: 33, title: "Generate Random Password", description: "Write a function that generates a random password of a specified length." },
  { id: 34, title: "Convert Celsius to Fahrenheit", description: "Write a function that converts a temperature from Celsius to Fahrenheit." },
  { id: 35, title: "Convert Fahrenheit to Celsius", description: "Write a function that converts a temperature from Fahrenheit to Celsius." },
  { id: 36, title: "Check if Two Arrays are Equal", description: "Write a function that checks if two arrays are equal (contain the same elements in the same order)." },
  { id: 37, title: "Find the Intersection of Two Arrays", description: "Write a function that finds the common elements (intersection) of two arrays." },
  { id: 38, title: "Find the Union of Two Arrays", description: "Write a function that finds the union of two arrays (all unique elements from both arrays)." },
  { id: 39, title: "Implement a Simple Queue", description: "Implement a basic queue data structure with `enqueue`, `dequeue`, and `isEmpty` methods." },
  { id: 40, title: "Implement a Simple Stack", description: "Implement a basic stack data structure with `push`, `pop`, and `isEmpty` methods." },
  { id: 41, title: "Binary Search", description: "Implement the binary search algorithm to find a specific element in a sorted array." },
  { id: 42, title: "Linear Search", description: "Implement the linear search algorithm to find a specific element in an array." },
  { id: 43, title: "Sort an Array (without using built-in sort)", description: "Implement a sorting algorithm (e.g., bubble sort, insertion sort) to sort an array of numbers." },
  { id: 44, title: "Check if a String Starts with a Specific Prefix", description: "Write a function that checks if a given string starts with a specific prefix." },
  { id: 45, title: "Check if a String Ends with a Specific Suffix", description: "Write a function that checks if a given string ends with a specific suffix." },
  { id: 46, title: "Compose Functions", description: "Write a function `compose` that takes a series of functions and returns a new function that applies them from right to left." },
  { id: 47, title: "Implement Curry Function", description: "Write a function that takes a function and returns its curried version." },
  { id: 48, title: "Find All Indices of an Element in an Array", description: "Write a function that returns an array of all indices where a specific element can be found in a given array." },
  { id: 49, title: "Check if One Array is a Subset of Another", description: "Write a function that checks if all elements of one array are present in another array." },
  { id: 50, title: "Implement a Basic Promise", description: "Implement a simplified version of a Promise with `then` and `resolve` methods." },
];
router.get('/js/challenges', (req, res) => {
  res.json(challenges);
});

module.exports = router;
