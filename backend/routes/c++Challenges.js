const express = require('express');
const router = express.Router();

const cppChallenges = [
  { id: 1, title: "Reverse a String", description: "Write a C++ function that takes a string as input and returns the reversed version of the string.", code: `// C++: std::string reverseString(std::string str); \n// JS-style: function reverseString(str) { /* Your code here */ }` },
  { id: 2, title: "Factorial of a Number", description: "Write a C++ function that calculates the factorial of a given non-negative integer.", code: `// C++: int factorial(int n); \n// JS-style: function factorial(n) { /* Your code here */ }` },
  { id: 3, title: "Check for Palindrome", description: "Write a C++ function that checks if a given string is a palindrome.", code: `// C++: bool isPalindrome(std::string str); \n// JS-style: function isPalindrome(str) { /* Your code here */ }` },
  { id: 4, title: "Find the Largest Element in an Array", description: "Write a C++ function that takes an array of integers and its size, returning the largest element.", code: `// C++: int findLargest(int arr[], int size); \n// JS-style: function findLargest(arr) { /* Your code here */ }` },
  { id: 5, title: "Remove Duplicates from a Vector", description: "Write a C++ function that takes a vector of integers and returns a new vector with all duplicate elements removed.", code: `// C++: std::vector<int> removeDuplicates(std::vector<int> arr); \n// JS-style: function removeDuplicates(arr) { /* Your code here */ }` },
  { id: 6, title: "Count Occurrences of a Character", description: "Write a C++ function to count the occurrences of a specific character in a string.", code: `// C++: int countChar(std::string str, char ch); \n// JS-style: function countChar(str, ch) { /* Your code here */ }` },
  { id: 7, title: "Title Case a Sentence", description: "Write a C++ function to convert a sentence to title case.", code: `// C++: std::string titleCase(std::string sentence); \n// JS-style: function titleCase(sentence) { /* Your code here */ }` },
  { id: 8, title: "Check if a Number is Prime", description: "Write a C++ function to check if a given positive integer is prime.", code: `// C++: bool isPrime(int n); \n// JS-style: function isPrime(n) { /* Your code here */ }` },
  { id: 9, title: "Fibonacci Sequence", description: "Write a C++ function to generate the first n Fibonacci numbers and return them in a vector.", code: `// C++: std::vector<int> fibonacci(int n); \n// JS-style: function fibonacci(n) { /* Your code here */ }` },
  { id: 10, title: "Anagram Checker", description: "Write a C++ function to check if two strings are anagrams.", code: `// C++: bool areAnagrams(std::string str1, std::string str2); \n// JS-style: function areAnagrams(str1, str2) { /* Your code here */ }` },
  { id: 11, title: "Find the Smallest Element in an Array", description: "Write a C++ function to find the smallest element in an array of integers.", code: `// C++: int findSmallest(int arr[], int size); \n// JS-style: function findSmallest(arr) { /* Your code here */ }` },
  { id: 12, title: "Sum of Array Elements", description: "Write a C++ function to calculate the sum of elements in an array of integers.", code: `// C++: int sumArray(int arr[], int size); \n// JS-style: function sumArray(arr) { /* Your code here */ }` },
  { id: 13, title: "Average of Array Elements", description: "Write a C++ function to calculate the average of elements in an array of integers.", code: `// C++: double averageArray(int arr[], int size); \n// JS-style: function averageArray(arr) { /* Your code here */ }` },
  { id: 14, title: "Reverse an Array (In-place)", description: "Write a C++ function to reverse an array of integers in-place.", code: `// C++: void reverseArray(int arr[], int size); \n// JS-style: function reverseArray(arr) { /* Your code here */ }` },
  { id: 15, title: "Merge Two Sorted Vectors", description: "Write a C++ function to merge two sorted vectors of integers into a new sorted vector.", code: `// C++: std::vector<int> mergeSortedVectors(std::vector<int> arr1, std::vector<int> arr2); \n// JS-style: function mergeSortedVectors(arr1, arr2) { /* Your code here */ }` },
  { id: 16, title: "Implement std::transform (Conceptual)", description: "Describe how you would implement the basic functionality of `std::transform` in C++ for a vector.", code: `// Conceptual description here` },
  { id: 17, title: "Implement std::filter (Conceptual)", description: "Describe how you would implement the basic functionality of filtering elements from a vector in C++.", code: `// Conceptual description here` },
  { id: 18, title: "Implement std::accumulate (Conceptual)", description: "Describe how you would implement the basic functionality of accumulating elements in a vector in C++.", code: `// Conceptual description here` },
  { id: 19, title: "Deep Copy a Vector of Vectors", description: "Write a C++ function to create a deep copy of a vector of vectors of integers.", code: `// C++: std::vector<std::vector<int>> deepCopy(std::vector<std::vector<int>> nestedVec); \n// JS-style: function deepCopy(nestedVec) { /* Your code here */ }` },
  { id: 20, title: "Debounce a Function (Conceptual - using timers)", description: "Describe how you might implement a debounce mechanism in C++ using timers (e.g., with `<chrono>` and `<thread>`).", code: `// Conceptual description here` },
  { id: 21, title: "Throttle a Function (Conceptual - using timers)", description: "Describe how you might implement a throttle mechanism in C++ using timers.", code: `// Conceptual description here` },
  { id: 22, title: "Find the Second Largest Element", description: "Write a C++ function to find the second largest element in an array of integers.", code: `// C++: int findSecondLargest(int arr[], int size); \n// JS-style: function findSecondLargest(arr) { /* Your code here */ }` },
  { id: 23, title: "Check if All Vector Elements are Unique", description: "Write a C++ function to check if all elements in a vector of integers are unique.", code: `// C++: bool areAllUnique(std::vector<int> arr); \n// JS-style: function areAllUnique(arr) { /* Your code here */ }` },
  { id: 24, title: "Flatten a 2D Vector", description: "Write a C++ function to flatten a 2D vector (vector of vectors) into a 1D vector.", code: `// C++: std::vector<int> flattenVector(std::vector<std::vector<int>> nestedVec); \n// JS-style: function flattenVector(nestedVec) { /* Your code here */ }` },
  { id: 25, title: "Group Vector Elements (by parity - example)", description: "Write a C++ function to group elements of a vector based on whether they are even or odd, returning a map.", code: `// C++: std::map<std::string, std::vector<int>> groupByParity(std::vector<int> arr); \n// JS-style: function groupByParity(arr) { /* Your code here */ }` },
  { id: 26, title: "Implement a Basic Calculator", description: "Write a C++ function that takes two doubles and an operator (+, -, *, /) and returns the result.", code: `// C++: double calculate(double num1, double num2, char operator); \n// JS-style: function calculate(num1, num2, operator) { /* Your code here */ }` },
  { id: 27, title: "Check for Substring", description: "Write a C++ function to check if a string contains a given substring.", code: `// C++: bool containsSubstring(std::string str, std::string sub); \n// JS-style: function containsSubstring(str, sub) { /* Your code here */ }` },
  { id: 28, title: "Replace All Occurrences", description: "Write a C++ function to replace all occurrences of a substring within a string.", code: `// C++: std::string replaceAllOccurrences(std::string str, std::string target, std::string replacement); \n// JS-style: function replaceAllOccurrences(str, target, replacement) { /* Your code here */ }` },
  { id: 29, title: "Find the Longest Word in a Sentence", description: "Write a C++ function to find the longest word in a sentence.", code: `// C++: std::string findLongestWord(std::string sentence); \n// JS-style: function findLongestWord(sentence) { /* Your code here */ }` },
  { id: 30, title: "Count Words in a Sentence", description: "Write a C++ function to count the number of words in a sentence.", code: `// C++: int countWords(std::string sentence); \n// JS-style: function countWords(sentence) { /* Your code here */ }` },
  { id: 31, title: "Generate Random Password", description: "Write a C++ function to generate a random password of a specified length.", code: `// C++: std::string generateRandomPassword(int length); \n// JS-style: function generateRandomPassword(length) { /* Your code here */ }` },
  { id: 32, title: "Convert Celsius to Fahrenheit", description: "Write a C++ function to convert Celsius to Fahrenheit.", code: `// C++: double celsiusToFahrenheit(double celsius); \n// JS-style: function celsiusToFahrenheit(celsius) { /* Your code here */ }` },
  { id: 33, title: "Convert Fahrenheit to Celsius", description: "Write a C++ function to convert Fahrenheit to Celsius.", code: `// C++: double fahrenheitToCelsius(double fahrenheit); \n// JS-style: function fahrenheitToCelsius(fahrenheit) { /* Your code here */ }` },
  { id: 34, title: "Check if Two Vectors are Equal", description: "Write a C++ function to check if two vectors of integers are equal.", code: `// C++: bool areVectorsEqual(std::vector<int> arr1, std::vector<int> arr2); \n// JS-style: function areVectorsEqual(arr1, arr2) { /* Your code here */ }` },
  { id: 35, title: "Find the Intersection of Two Vectors", description: "Write a C++ function to find the intersection of two vectors of integers.", code: `// C++: std::vector<int> findIntersection(std::vector<int> arr1, std::vector<int> arr2); \n// JS-style: function findIntersection(arr1, arr2) { /* Your code here */ }` },
  { id: 36, title: "Find the Union of Two Vectors", description: "Write a C++ function to find the union of two vectors of integers.", code: `// C++: std::vector<int> findUnion(std::vector<int> arr1, std::vector<int> arr2); \n// JS-style: function findUnion(arr1, arr2) { /* Your code here */ }` },
  { id: 37, title: "Implement a Simple Queue (Conceptual - using std::queue)", description: "Describe the basic usage of `std::queue` in C++ for implementing a queue data structure.", code: `// Conceptual description here` },
  { id: 38, title: "Implement a Simple Stack (Conceptual - using std::stack)", description: "Describe the basic usage of `std::stack` in C++ for implementing a stack data structure.", code: `// Conceptual description here` },
  { id: 39, title: "Binary Search", description: "Write a C++ function to perform binary search on a sorted vector of integers.", code: `// C++: int binarySearch(std::vector<int> arr, int target); \n// JS-style: function binarySearch(arr, target) { /* Your code here */ }` },
  { id: 40, title: "Linear Search", description: "Write a C++ function to perform linear search on a vector of integers.", code: `// C++: int linearSearch(std::vector<int> arr, int target); \n// JS-style: function linearSearch(arr, target) { /* Your code here */ }` },
  { id: 41, title: "Sort a Vector (without using std::sort)", description: "Write a C++ function to sort a vector of integers (e.g., using bubble sort, insertion sort).", code: `// C++: void sortVector(std::vector<int>& arr); \n// JS-style: function sortVector(arr) { /* Your code here */ }` },
  { id: 42, title: "Check if a String Starts with a Specific Prefix", description: "Write a C++ function to check if a string starts with a given prefix.", code: `// C++: bool startsWith(std::string str, std::string prefix); \n// JS-style: function startsWith(str, prefix) { /* Your code here */ }` },
  { id: 43, title: "Check if a String Ends with a Specific Suffix", description: "Write a C++ function to check if a string ends with a given suffix.", code: `// C++: bool endsWith(std::string str, std::string suffix); \n// JS-style: function endsWith(str, suffix) { /* Your code here */ }` },
  { id: 44, title: "Pointers and References (Conceptual)", description: "Explain the difference between pointers and references in C++ and when you might use each.", code: `// Conceptual description here` },
  { id: 45, title: "Memory Management (Conceptual - new/delete)", description: "Describe the basic usage of `new` and `delete` for dynamic memory allocation in C++.", code: `// Conceptual description here` },
  { id: 46, title: "Classes and Objects (Conceptual)", description: "Explain the basic concepts of classes and objects in C++ and how to define a simple class.", code: `// Conceptual description here` },
  { id: 47, title: "Inheritance (Conceptual)", description: "Explain the concept of inheritance in C++ and provide a simple example.", code: `// Conceptual description here` },
  { id: 48, title: "Polymorphism (Conceptual)", description: "Explain the concept of polymorphism in C++ (both compile-time and run-time) and provide a simple example.", code: `// Conceptual description here` },
  { id: 49, title: "Templates (Conceptual)", description: "Explain the purpose and basic syntax of templates in C++.", code: `// Conceptual description here` },
  { id: 50, title: "Standard Template Library (STL) (Conceptual)", description: "Briefly describe the purpose and some key components (e.g., containers, algorithms, iterators) of the C++ Standard Template Library (STL).", code: `// Conceptual description here` },
];

router.get('/cpp/challenges', (req, res) => {
  res.json(cppChallenges);
});

module.exports = router;